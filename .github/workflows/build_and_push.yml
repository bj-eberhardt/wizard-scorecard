name: Build and release

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build-and-push:
    if: "!(contains(github.event.head_commit.message, 'chore(release): bump') || contains(github.event.head_commit.message, '{skip ci]'))"
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Get latest commit information
        id: message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s%n%n%b")
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üîß Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build Vue project
        run: npm run build

      - name: Increase version for release
        run: |
          npm version patch -m "chore(release): bump to %s"
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t wizard-scorecard:test .

      - name: Test Docker image
        run: |
          docker run -d -p 8080:80 --name test-container wizard-scorecard:test
          sleep 5
          curl --fail http://localhost:8080 && curl -s http://localhost:8080 | grep -q "<title>Wizard Punkteblock</title>" || (docker logs test-container && exit 1)
          docker stop test-container

      - name: Pull with rebase before pushing
        run: git pull --rebase origin master

      - name: Push version and tag
        run: |
          git push origin HEAD
          git push origin --tags

      - name: Use new version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag and push Docker image
        if: success()
        run: |
          docker tag wizard-scorecard:test ${{ secrets.DOCKERHUB_USERNAME }}/wizard-scorecard:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/wizard-scorecard:latest
          docker tag wizard-scorecard:test ${{ secrets.DOCKERHUB_USERNAME }}/wizard-scorecard:${{ steps.get-version.outputs.version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/wizard-scorecard:${{ steps.get-version.outputs.version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: 'Release ${{ steps.get-version.outputs.version }}'
          body: ${{ steps.message.outputs.message }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
